1. Communication layer (+ security):
- Implemented using budle protocol or just sending messages to neighbours?
- API: 
  * send_file(File) // File -- data and information from sync layer
  * on_receive(callback)
  
2. Synchronization layer:
- Handling writes to files: watch file system (e.g. using inotify) and broadcast/multicast file (using communication layer).
- Handling new files from network: callback(File) -> check if new file is not conflicting with current one, if there's no conflict AND CONDITION update the file,
  otherwise call ConflictResolution callback and after it's resolved treat it as a write (broadcast file in the network).
  When new file is received and it's history contains merge from local to remote -> save current version and switch to new one. (all merges are saved).

 CONDITION - longest valid chain/newest modification time -- option, can be changed

- ConflictResolution: save (both? or only local?) version of file and let user handle the conflict

3. Conflict resolution layer:
- Gives 2 conflicting files to the user, user can choose to retain one or the other or merge (TODO - how? just allow to donwload 2 files and expect 3rd as result?)
- Interface: GUI (+ command_line?)
